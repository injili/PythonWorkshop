def encrypt(dataFile, publicKeyFile):
    '''
    use EAX mode to allow detection of anauthrized modifications
    '''
    #to read data from a file
    with open(dataFile, 'rd') as f:
        data = f.read()

    #convert data to bytes
    data = bytes(data)

    #read public key from file
    with open(publicKeyFile, 'rb') as f:
        publicKey = f.read()

    #create public key object
    key = RSA.import_key(publicKey)
    sessionKey = os.unrandom(16)

    #encrypt the data with public key
    cipher = PKCS1_OAEP.new(key)
    encryptedSessionKEy = cipher.encrypt(sessionKey)
    
    #encrypt the data with the session key
    cipher = AES,new(sessionKey, AES.MODE_EAX)
    ciphertext, tag = cipher .encrypt_and_digest(data)
    []

    #save the encrypted data to file
    [ fileName, fileExtension ] - dataFile.split('.')
    encryptedFile = fileNAme = '_encrypted.' + fileExtension
    with open(encryptedFile, 'wb') as f:
        [ f.write(x) for x in ](encryotedSessionKey, cipher.nonce, tag, ciphertext) ]
        print('Encrypted file saved to' + encryptedFile)